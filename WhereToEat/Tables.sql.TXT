DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS restaurants CASCADE;
DROP TABLE IF EXISTS categories CASCADE; 
DROP TABLE IF EXISTS restaurant_category CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS commentsToApprove CASCADE;
DROP TABLE IF EXISTS user_rating CASCADE;

CREATE TABLE users(
	user_id SERIAL PRIMARY KEY,
	username TEXT DEFAULT NULL,
	email TEXT UNIQUE NOT NULL,
	password TEXT NOT NULL,
	isOwner BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE restaurants(
	restaurant_id SERIAL PRIMARY KEY,
	name TEXT DEFAULT NULL,
	city TEXT DEFAULT NULL,
	zip_code INTEGER DEFAULT NULL,
	address TEXT DEFAULT NULL,
	rating NUMERIC(3,2) DEFAULT 0,
	owner_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,
	restaurant_imageURL TEXT DEFAULT NULL
);

CREATE TABLE comments(
	comment_id INTEGER	 PRIMARY KEY,
	user_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,
	restaurant_id INTEGER NOT NULL REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
	comment_time TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),	
	message TEXT
);

CREATE TABLE commentsToApprove(
	comment_id SERIAL PRIMARY KEY,
	user_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,
	restaurant_id INTEGER NOT NULL REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
	comment_time TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
	message TEXT,
	isApproved BOOLEAN DEFAULT FALSE
);

CREATE TABLE categories(
	category_id SERIAL PRIMARY KEY,
	name TEXT UNIQUE NOT NULL
);

CREATE TABLE restaurant_category(
	restaurant_id INTEGER NOT NULL REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
	category_id INTEGER NOT NULL REFERENCES categories(category_id) ON DELETE CASCADE,
	PRIMARY KEY(restaurant_id, category_id)
);

CREATE TABLE user_rating(
	restaurant_id INTEGER REFERENCES restaurants(restaurant_id) ON DELETE SET NULL,
	user_id INTEGER REFERENCES users(user_id) ON DELETE SET NULL,
	rating INTEGER CHECK (rating <= 5)
	PRIMARY KEY(restaurant_id, user_id)
);

Create or replace function insertToComments()returns trigger as $$
declare approved bool;
begin
SELECT isApproved FROM commentsToApprove WHERE comment_id = NEW.comment_id into approved;
if approved = true
then
INSERT INTO comments (comment_id, user_id,restaurant_id, message) Values (New.comment_id, New.user_id, New.restaurant_id, New.message);
end if;
RETURN NULL;
end;
$$ language plpgsql;

CREATE TRIGGER insertToComments_trigger
after insert or update on commentsToApprove
for each row execute function insertToComments();

Create or replace function updateRestaurantRating()returns trigger as $$
declare 
	restaurant_rating NUMERIC (3,2);
	temp_restaurant_id INTEGER;
begin
IF (TG_OP = 'DELETE') THEN
	temp_restaurant_id = OLD.restaurant_id;
	SELECT AVG(rating) FROM user_rating WHERE restaurant_id = OLD.restaurant_id into restaurant_rating;
End if;
IF (TG_OP = 'INSERT') THEN
	temp_restaurant_id = NEW.restaurant_id;
	SELECT AVG(rating) FROM user_rating WHERE restaurant_id = NEW.restaurant_id into restaurant_rating;
END if;
if restaurant_rating > 0 then
	UPDATE restaurants  SET rating = restaurant_rating WHERE restaurant_id = temp_restaurant_id;
end if;
RETURN NULL;
end;
$$ language plpgsql;

CREATE TRIGGER updateRestaurantRating_trigger
after INSERT or DELETE on user_rating
for each row execute function updateRestaurantRating();

/*Update  commentsToApprove SET  isApproved = true Where comment_id = 2;
INsert Into commentsToApprove (user_id, restaurant_id, message, isApproved) Values (1,1, 'kdacda', true)
select * from restaurants
select * from comments*/

INSERT INTO users (username, email, password, isOwner) VALUES ('admin', 'admin@admin.com', '2c+qROtqotsZWgY1wXh5OIukwbD5oi3iiRz09ReHlEhIlvYg', true);

INSERT Into categories (name) Values ('Bakery');
INSERT Into categories (name) Values ('Fast-food');
INSERT Into categories (name) Values ('Fine dining');
INSERT Into categories (name) Values ('Hungarian');
INSERT Into categories (name) Values ('Indian');
INSERT Into categories (name) Values ('Pizzeria');
INSERT Into categories (name) Values ('Mexican');
INSERT Into categories (name) Values ('Hamburger');
INSERT Into categories (name) Values ('Fish and chips');
INSERT Into categories (name) Values ('All you can eat');
INSERT Into categories (name) Values ('Vegan');

INSERT INTO restaurant_category (restaurant_id, category_id) VALUES (1,1);

INSERT INTO restaurants (name, city, zip_code, address, rating, owner_id) VALUES ('Hamburgers', 'Budapest', 1002, 'Petofi u. 2', 3.2,1);
